{
	"info": {
		"_postman_id": "78b59fd1-b284-42be-b425-26941bc27ab8",
		"name": "PetStoreAPI_Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28929346"
	},
	"item": [
		{
			"name": "FunctionalityTests",
			"item": [
				{
					"name": "Pets",
					"item": [
						{
							"name": "GETPets",
							"item": [
								{
									"name": "findByStatus",
									"item": [
										{
											"name": "TC1_findByStatusAvailable",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Test Case 1: Validate Response Status Code\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"//Test Case 2: Validate Content-Type Header\r",
															"pm.test(\"Content-Type is application/json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
															"});\r",
															"//Test Case 3: Validate Response Body Structure\r",
															"pm.test(\"Response body is an array\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.be.an(\"array\");\r",
															"});\r",
															"\r",
															"\r",
															"//Test Case 4: Validate Pet Status in Response Body\r",
															"pm.test(\"Each pet status is 'available'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    jsonData.forEach(function(pet) {\r",
															"        pm.expect(pet.status).to.eql(\"available\");\r",
															"    });\r",
															"});\r",
															"//Test Case 5: Validate Response Time\r",
															"pm.test(\"Response time is less than 100000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(100000);\r",
															"});\r",
															"//Test Case 6: Validate Large Dataset Handling\r",
															"pm.test(\"Large dataset returns and performance is acceptable\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.be.an(\"array\");\r",
															"    pm.expect(jsonData.length).to.be.above(100); // Example threshold for large dataset\r",
															"    pm.expect(pm.response.responseTime).to.be.below(100000); // Example performance threshold\r",
															"});\r",
															"//Test Case 7: Assert Status is Not Pending or Sold\r",
															"\r",
															"pm.test(\"Pet status is not 'pending' or 'sold'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    \r",
															"    jsonData.forEach(function(pet) {\r",
															"        pm.expect(pet.status).to.not.eql(\"pending\");\r",
															"        pm.expect(pet.status).to.not.eql(\"sold\");\r",
															"    });\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base_url}}pet/findByStatus?status=available",
													"host": [
														"{{base_url}}pet"
													],
													"path": [
														"findByStatus"
													],
													"query": [
														{
															"key": "status",
															"value": "available"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "TC2_findByStatusPending",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Test Case 1: Validate Response Status Code\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"//Test Case 2: Validate Content-Type Header\r",
															"pm.test(\"Content-Type is application/json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
															"});\r",
															"//Test Case 3: Validate Response Body Structure\r",
															"pm.test(\"Response body is an array\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.be.an(\"array\");\r",
															"});\r",
															"\r",
															"\r",
															"//Test Case 4: Validate Pet Status in Response Body\r",
															"pm.test(\"Each pet status is 'pending'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    jsonData.forEach(function(pet) {\r",
															"        pm.expect(pet.status).to.eql(\"pending\");\r",
															"    });\r",
															"});\r",
															"//Test Case 5: Validate Response Time\r",
															"pm.test(\"Response time is less than 10000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
															"});\r",
															"//Test Case 6: Validate Large Dataset Handling\r",
															"pm.test(\"Large dataset returns and performance is acceptable\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.be.an(\"array\");\r",
															"    // Example threshold for large dataset\r",
															"    pm.expect(pm.response.responseTime).to.be.below(10000); // Example performance threshold\r",
															"});\r",
															"//Test Case 7: Assert Status is Not Pending or Sold\r",
															"pm.test(\"Pet status is not 'pending' or 'sold'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    \r",
															"    jsonData.forEach(function(pet) {\r",
															"        pm.expect(pet.status).to.not.eql(\"available\");\r",
															"        pm.expect(pet.status).to.not.eql(\"sold\");\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base_url}}pet/findByStatus?status=pending",
													"host": [
														"{{base_url}}pet"
													],
													"path": [
														"findByStatus"
													],
													"query": [
														{
															"key": "status",
															"value": "pending"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "TC3_findByStatusSold",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Test Case 1: Validate Response Status Code\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"//Test Case 2: Validate Content-Type Header\r",
															"pm.test(\"Content-Type is application/json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
															"});\r",
															"//Test Case 3: Validate Response Body Structure\r",
															"pm.test(\"Response body is an array\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.be.an(\"array\");\r",
															"});\r",
															"\r",
															"\r",
															"//Test Case 4: Validate Pet Status in Response Body\r",
															"pm.test(\"Each pet status is 'Sold'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    jsonData.forEach(function(pet) {\r",
															"        pm.expect(pet.status).to.eql(\"sold\");\r",
															"    });\r",
															"});\r",
															"//Test Case 5: Validate Response Time\r",
															"pm.test(\"Response time is less than 4000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
															"});\r",
															"//Test Case 6: Validate Large Dataset Handling\r",
															"pm.test(\"Large dataset returns and performance is acceptable\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.be.an(\"array\");\r",
															"    pm.expect(jsonData.length).to.be.below(100); // Example threshold for large dataset\r",
															"    pm.expect(pm.response.responseTime).to.be.below(5000); // Example performance threshold\r",
															"});\r",
															"//Test Case7: Assert Status is Not Pending or Sold\r",
															"\r",
															"pm.test(\"Pet status is not 'pending' or 'sold'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    \r",
															"    jsonData.forEach(function(pet) {\r",
															"        pm.expect(pet.status).to.not.eql(\"pending\");\r",
															"        pm.expect(pet.status).to.not.eql(\"available\");\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base_url}}pet/findByStatus?status=sold",
													"host": [
														"{{base_url}}pet"
													],
													"path": [
														"findByStatus"
													],
													"query": [
														{
															"key": "status",
															"value": "sold"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "TC4_findByStatusPendingAndSold",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Test1 :available and pending statuses:\r",
															"\r",
															"pm.test(\"Pets should be either 'pending' or 'sold'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    jsonData.forEach(function(pet) {\r",
															"        pm.expect(pet.status).to.be.oneOf([\"sold\", \"pending\"]);\r",
															"    });\r",
															"});\r",
															"//Test2: Status Code Should Be 200:\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"//Test3: Response Content-Type is JSON:\r",
															"pm.test(\"Content-Type is application/json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
															"});\r",
															"//Test4: Response Time Should Be Below 2000ms:\r",
															"pm.test(\"Response time is less than 4000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base_url}}pet/findByStatus?status=pending&status=sold",
													"host": [
														"{{base_url}}pet"
													],
													"path": [
														"findByStatus"
													],
													"query": [
														{
															"key": "status",
															"value": "pending"
														},
														{
															"key": "status",
															"value": "sold"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "TC5_findByStatusInvalid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Expected failure: Status is invalid\", function () {\r",
															"    try {\r",
															"        pm.expect(pm.response.code).to.eql(200); // or the expected failure condition\r",
															"    } catch (e) {\r",
															"        console.log(\"This is an expected failure: \" + e.message);\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.test(\"Status is invalid\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"[]\");\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base_url}}pet/findByStatus?Status=invalid",
													"host": [
														"{{base_url}}pet"
													],
													"path": [
														"findByStatus"
													],
													"query": [
														{
															"key": "Status",
															"value": "invalid"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "TC6_findByStatusEmpty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Expected failure: Status is invalid\", function () {\r",
															"    try {\r",
															"        pm.expect(pm.response.code).to.eql(200); // or the expected failure condition\r",
															"    } catch (e) {\r",
															"        console.log(\"This is an expected failure: \" + e.message);\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.test(\"Status is invalid\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"[]\");\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://petstore.swagger.io/v2/pet/findByStatus?Status=\" \"",
													"protocol": "https",
													"host": [
														"petstore",
														"swagger",
														"io"
													],
													"path": [
														"v2",
														"pet",
														"findByStatus"
													],
													"query": [
														{
															"key": "Status",
															"value": "\" \""
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "TC7_findByStatusAvailableAndPending",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 200\", function () {\r",
															"    pm.expect(pm.response.to.have.status(200));\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://petstore.swagger.io/v2/pet/findByStatus?status=available&status=pending",
													"protocol": "https",
													"host": [
														"petstore",
														"swagger",
														"io"
													],
													"path": [
														"v2",
														"pet",
														"findByStatus"
													],
													"query": [
														{
															"key": "status",
															"value": "available"
														},
														{
															"key": "status",
															"value": "pending"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "findByPetID",
									"item": [
										{
											"name": "TC8_pet_petId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test for Content-Type\r",
															"pm.test(\"Content-Type is application/json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
															"});\r",
															"\r",
															"// Test to check if ID is an integer\r",
															"pm.test(\"Pet ID is an integer\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.id).to.be.a('number');\r",
															"    pm.expect(Number.isInteger(jsonData.id)).to.be.true;\r",
															"});\r",
															"\r",
															"// Test to check if pet name is present\r",
															"pm.test(\"Pet name is present\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property('name');\r",
															"});\r",
															"\r",
															"// Test to verify if status is present and valid\r",
															"pm.test(\"Pet status is available\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property('status');\r",
															"    pm.expect(jsonData.status).to.be.oneOf([\"available\", \"pending\", \"sold\"]);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Response time is less than 10000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
															"});\r",
															"\r",
															"// Test for status code 200 or 404\r",
															"pm.test(\"Expected failure: Status is invalid\", function () {\r",
															"    try {\r",
															"        pm.expect(pm.response.code).to.eql(200); // or the expected failure condition\r",
															"    } catch (e) {\r",
															"        console.log(\"This is an expected failure: \" + e.message);\r",
															"    }\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base_url}}pet/{{petId}}",
													"host": [
														"{{base_url}}pet"
													],
													"path": [
														"{{petId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "TC9_pet_invalid_petId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Response status code is 404\", function () {\r",
															"  pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response time is less than 3000ms\", function () {\r",
															"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
															"});\r",
															"// Test to check the Content-Type header\r",
															"pm.test(\"Response has Content-Type header of application/json\", function () {\r",
															"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base_url}}pet/11223547",
													"host": [
														"{{base_url}}pet"
													],
													"path": [
														"11223547"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "CreatePets",
							"item": [
								{
									"name": "TC10_CreatePet",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Example test: Check if the PetID is generated, set, and is a valid number\r",
													"pm.test(\"PetID is generated, set, and is a valid number\", function () {\r",
													"    let petID = pm.collectionVariables.get(\"PetID\");\r",
													"\r",
													"    // Check if PetID is a valid number and not NaN\r",
													"    pm.expect(Number(petID)).to.be.a('number').and.not.be.NaN; \r",
													"});\r",
													"\r",
													"// Log the PetID for debugging purposes\r",
													"console.log(\"PetID after request: \" + pm.collectionVariables.get(\"PetID\"));\r",
													"\r",
													"// Log the request body for debugging\r",
													"console.log(\"Request body:\", {\r",
													"    \"id\": pm.collectionVariables.get(\"PetID\"),\r",
													"    \"name\": \"Example Pet\"\r",
													"});\r",
													"\r",
													"// Capture the ID from the response body\r",
													"var responseJson = pm.response.json();\r",
													"pm.collectionVariables.set(\"PetID\", responseJson.id); // Store the server-generated PetID\r",
													"\r",
													"// Log the new PetID from the response for debugging purposes\r",
													"console.log(\"Response PetID is being set as:\", pm.collectionVariables.get(\"PetID\"));\r",
													"\r",
													"// Example test: Ensure the response contains an ID and it's valid\r",
													"pm.test(\"Response contains a valid PetID\", function () {\r",
													"    pm.expect(responseJson.id).to.be.a('number'); // Ensure the ID is a number\r",
													"\r",
													"    // Ensure the response ID matches the one sent in the request\r",
													"    pm.expect(responseJson.id).to.equal(Number(pm.collectionVariables.get(\"PetID\"))); // Ensure IDs match\r",
													"});\r",
													"//pm.collectionVariables.unset(\"PetID\"); // Ensure previous PetID is cleared\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Improved random ID generator to avoid repeated numbers\r",
													"function generateRandomId() {\r",
													"    return Math.floor(Date.now() * Math.random()); // Uses current timestamp combined with random multiplier\r",
													"}\r",
													"\r",
													"// Set the random ID as a collection variable\r",
													"var randomId = generateRandomId();\r",
													"pm.collectionVariables.set(\"PetID\", randomId);\r",
													"\r",
													"// Log the generated ID for debugging purposes\r",
													"console.log(\"Generated PetID: \" + randomId);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"{{PetID}}\",\r\n    \"name\": \"Example Pet\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}pet",
											"host": [
												"{{base_url}}pet"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC11_CreatePet_invalidDetails",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test for status code 400\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"// Test for Content-Type application/json\r",
													"pm.test(\"Content-Type is application/json\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
													"});\r",
													"\r",
													"// Test for presence of 'code' in response body\r",
													"pm.test(\"Response contains 'code'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('code');\r",
													"});\r",
													"\r",
													"// Test for correct 'code' value\r",
													"pm.test(\"Response 'code' is 400\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.code).to.eql(400);\r",
													"});\r",
													"\r",
													"// Test for presence of 'type' in response body\r",
													"pm.test(\"Response contains 'type'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('type');\r",
													"});\r",
													"\r",
													"// Test for correct 'type' value\r",
													"pm.test(\"Response 'type' is 'unknown'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.type).to.eql('unknown');\r",
													"});\r",
													"\r",
													"// Test for presence of 'message' in response body\r",
													"pm.test(\"Response contains 'message'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"});\r",
													"\r",
													"// Test for correct 'message' value\r",
													"pm.test(\"Response 'message' is 'bad input'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql('bad input');\r",
													"});\r",
													"\r",
													"// Test for response time (e.g., less than 300ms)\r",
													"pm.test(\"Response time is less than 1000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": ,\r\n    \"category\": {\r\n        \"id\": ,\r\n        \"name\": \"\"\r\n    },\r\n    \"photoUrls\": [\"https://petstore.com/pic1\"],\r\n    \"tags\": [\r\n        {\r\n            \"id\": ,\r\n            \"name\": \"\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}pet",
											"host": [
												"{{base_url}}pet"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC12_CreatePetEmptyDetails",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test for status code 400\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"// Test for Content-Type application/json\r",
													"pm.test(\"Content-Type is application/json\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
													"});\r",
													"\r",
													"// Test for presence of 'code' in response body\r",
													"pm.test(\"Response contains 'code'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('code');\r",
													"});\r",
													"\r",
													"// Test for correct 'code' value\r",
													"pm.test(\"Response 'code' is 400\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.code).to.eql(400);\r",
													"});\r",
													"\r",
													"// Test for presence of 'type' in response body\r",
													"pm.test(\"Response contains 'type'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('type');\r",
													"});\r",
													"\r",
													"// Test for correct 'type' value\r",
													"pm.test(\"Response 'type' is 'unknown'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.type).to.eql('unknown');\r",
													"});\r",
													"\r",
													"// Test for presence of 'message' in response body\r",
													"pm.test(\"Response contains 'message'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"});\r",
													"\r",
													"// Test for correct 'message' value\r",
													"pm.test(\"Response 'message' is 'bad input'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql('bad input');\r",
													"});\r",
													"\r",
													"// Test for response time (e.g., less than 300ms)\r",
													"pm.test(\"Response time is less than 3000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n     \"id\": \r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}pet",
											"host": [
												"{{base_url}}pet"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "UpdatePets",
							"item": [
								{
									"name": "TC13_UpdatePet",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type is application/json\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains 'id'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('id');\r",
													"});\r",
													"\r",
													"pm.test(\"Response 'id' is a number\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.id).to.be.a('number');\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains 'category'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('category');\r",
													"});\r",
													"\r",
													"pm.test(\"Response 'category' has 'id' and 'name'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.category).to.have.property('id');\r",
													"    pm.expect(jsonData.category).to.have.property('name');\r",
													"    pm.expect(jsonData.category.id).to.be.a('number');\r",
													"    pm.expect(jsonData.category.name).to.be.a('string');\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains 'name'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('name');\r",
													"});\r",
													"\r",
													"pm.test(\"Response 'name' is 'doggie2'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.name).to.eql('doggie2');\r",
													"});\r",
													"\r",
													"pm.test(\"Response 'photoUrls' is an array\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.photoUrls).to.be.an('array');\r",
													"    pm.expect(jsonData.photoUrls).to.have.lengthOf.at.least(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains 'tags'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('tags');\r",
													"});\r",
													"\r",
													"pm.test(\"Response 'tags' is an array\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.tags).to.be.an('array');\r",
													"    pm.expect(jsonData.tags).to.have.lengthOf.at.least(1);\r",
													"});\r",
													"\r",
													"pm.test(\"First tag has 'id' and 'name'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.tags[0]).to.have.property('id');\r",
													"    pm.expect(jsonData.tags[0]).to.have.property('name');\r",
													"    pm.expect(jsonData.tags[0].id).to.be.a('number');\r",
													"    pm.expect(jsonData.tags[0].name).to.be.a('string');\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains 'status'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('status');\r",
													"});\r",
													"\r",
													"pm.test(\"Response 'status' is 'available'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql('available');\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 3000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.unset(\"randomName\");\r",
													"console.log(\"RandomName variable unset.\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomName(length) {\r",
													"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
													"    let result = '';\r",
													"    const charactersLength = characters.length;\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"const randomName = generateRandomName(8);\r",
													"pm.collectionVariables.set(\"randomName\", randomName);\r",
													"console.log(\"Generated Random Name: \" + randomName);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{PetID}},\r\n  \"category\": {\r\n    \"name\": \"{{randomName}}\"\r\n  },\r\n  \"name\": \"doggie2\",\r\n  \r\n  \"tags\": [\r\n    {\r\n      \r\n      \"name\": \"{{randomName}}\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://petstore.swagger.io/v2/pet",
											"protocol": "https",
											"host": [
												"petstore",
												"swagger",
												"io"
											],
											"path": [
												"v2",
												"pet"
											]
										},
										"description": "Generated from cURL: curl -X 'PUT' \\\r\n  'https://petstore.swagger.io/v2/pet' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"id\": 0,\r\n  \"category\": {\r\n    \"id\": 0,\r\n    \"name\": \"string\"\r\n  },\r\n  \"name\": \"doggie3\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 567,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}'"
									},
									"response": []
								}
							]
						},
						{
							"name": "DeletePets",
							"item": [
								{
									"name": "TC14_DeletePetByPetId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test for status code 200 (assuming successful response)\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Test for Content-Type application/json\r",
													"pm.test(\"Content-Type is application/json\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
													"});\r",
													"\r",
													"// Test for presence of 'code' in response body\r",
													"pm.test(\"Response contains 'code'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('code');\r",
													"});\r",
													"\r",
													"// Test for presence of 'type' in response body\r",
													"pm.test(\"Response contains 'type'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('type');\r",
													"});\r",
													"\r",
													"// Test for correct 'type' value\r",
													"pm.test(\"Response 'type' is 'unknown'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.type).to.eql('unknown');\r",
													"});\r",
													"\r",
													"// Test for presence of 'message' in response body\r",
													"pm.test(\"Response contains 'message'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"});\r",
													"\r",
													"// Test for response time (less than 10000ms)\r",
													"pm.test(\"Response time is less than 10000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													"\r",
													"// Unset the PetID variable after request execution\r",
													"pm.collectionVariables.unset(\"PetID\"); \r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://petstore.swagger.io/v2/pet/{{PetID}}",
											"protocol": "https",
											"host": [
												"petstore",
												"swagger",
												"io"
											],
											"path": [
												"v2",
												"pet",
												"{{PetID}}"
											]
										},
										"description": "Generated from cURL: curl -X 'DELETE' \\\r\n  'https://petstore.swagger.io/v2/pet/9223372016900019095' \\\r\n  -H 'accept: application/json'"
									},
									"response": []
								}
							]
						},
						{
							"name": "Pet_Chaining",
							"item": [
								{
									"name": "TC15_CreatePet",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Example test: Check if the PetID is generated, set, and is a valid number\r",
													"pm.test(\"PetID is generated, set, and is a valid number\", function () {\r",
													"    let petID = pm.collectionVariables.get(\"PetID\");\r",
													"\r",
													"    // Check if PetID is a valid number and not NaN\r",
													"    pm.expect(Number(petID)).to.be.a('number').and.not.be.NaN; \r",
													"});\r",
													"\r",
													"// Log the PetID for debugging purposes\r",
													"console.log(\"PetID after request: \" + pm.collectionVariables.get(\"PetID\"));\r",
													"\r",
													"// Log the request body for debugging\r",
													"console.log(\"Request body:\", {\r",
													"    \"id\": pm.collectionVariables.get(\"PetID\"),\r",
													"    \"name\": \"Example Pet\"\r",
													"});\r",
													"\r",
													"// Capture the ID from the response body\r",
													"var responseJson = pm.response.json();\r",
													"pm.collectionVariables.set(\"PetID\", responseJson.id); // Store the server-generated PetID\r",
													"\r",
													"// Log the new PetID from the response for debugging purposes\r",
													"console.log(\"Response PetID is being set as:\", pm.collectionVariables.get(\"PetID\"));\r",
													"\r",
													"// Example test: Ensure the response contains an ID and it's valid\r",
													"pm.test(\"Response contains a valid PetID\", function () {\r",
													"    pm.expect(responseJson.id).to.be.a('number'); // Ensure the ID is a number\r",
													"\r",
													"    // Ensure the response ID matches the one sent in the request\r",
													"    pm.expect(responseJson.id).to.equal(Number(pm.collectionVariables.get(\"PetID\"))); // Ensure IDs match\r",
													"});\r",
													"//pm.collectionVariables.unset(\"PetID\"); // Ensure previous PetID is cleared\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Improved random ID generator to avoid repeated numbers\r",
													"function generateRandomId() {\r",
													"    return Math.floor(Date.now() * Math.random()); // Uses current timestamp combined with random multiplier\r",
													"}\r",
													"\r",
													"// Set the random ID as a collection variable\r",
													"var randomId = generateRandomId();\r",
													"pm.collectionVariables.set(\"PetID\", randomId);\r",
													"\r",
													"// Log the generated ID for debugging purposes\r",
													"console.log(\"Generated PetID: \" + randomId);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"{{PetID}}\",\r\n    \"name\": \"Example Pet\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}pet",
											"host": [
												"{{base_url}}pet"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC16_pet_petId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test for status code\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Test for Content-Type\r",
													"pm.test(\"Content-Type is application/json\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
													"});\r",
													"\r",
													"// Test to check if ID is an integer\r",
													"pm.test(\"Pet ID is an integer\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.id).to.be.a('number');\r",
													"    pm.expect(Number.isInteger(jsonData.id)).to.be.true;\r",
													"});\r",
													"\r",
													"// Test to check if pet name is present\r",
													"pm.test(\"Pet name is present\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('name');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Response time is less than 4000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}pet/{{PetID}}",
											"host": [
												"{{base_url}}pet"
											],
											"path": [
												"{{PetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC17_DeletePetByPetId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test for status code 404 (assuming error response for non-existing pet)\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Test for Content-Type application/json\r",
													"pm.test(\"Content-Type is application/json\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
													"});\r",
													"\r",
													"// Test for presence of 'code' in response body\r",
													"pm.test(\"Response contains 'code'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('code');\r",
													"});\r",
													"\r",
													"// Test for presence of 'type' in response body\r",
													"pm.test(\"Response contains 'type'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('type');\r",
													"});\r",
													"\r",
													"// Test for correct 'type' value\r",
													"pm.test(\"Response 'type' is 'unknown'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.type).to.eql('unknown');\r",
													"});\r",
													"\r",
													"// Test for presence of 'message' in response body\r",
													"pm.test(\"Response contains 'message'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"// Test for response time (e.g., less than 300ms)\r",
													"pm.test(\"Response time is less than 3000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
													"});\r",
													"pm.collectionVariables.unset(\"PetID\"); // Ensure previous PetID is cleared\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://petstore.swagger.io/v2/pet/{{PetID}}",
											"protocol": "https",
											"host": [
												"petstore",
												"swagger",
												"io"
											],
											"path": [
												"v2",
												"pet",
												"{{PetID}}"
											]
										},
										"description": "Generated from cURL: curl -X 'DELETE' \\\r\n  'https://petstore.swagger.io/v2/pet/9223372016900019095' \\\r\n  -H 'accept: application/json'"
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Store",
					"item": [
						{
							"name": "GET_Order",
							"item": [
								{
									"name": "TC21_storeInventory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response time is within acceptable range\", function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Validate the response schema for required fields\", function () {\r",
													"    const responseData = pm.response.json();\r",
													" \r",
													"    pm.expect(responseData).to.have.property('string');\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}store/inventory",
											"host": [
												"{{base_url}}store"
											],
											"path": [
												"inventory"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "GetOrderByID",
							"item": [
								{
									"name": "TC22_PurchaseOrderByValidID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Status code is either 200 or 404\", function () {\r",
													"    pm.expect([200, 404]).to.include(pm.response.code);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{base_url}}store/order/2",
											"host": [
												"{{base_url}}store"
											],
											"path": [
												"order",
												"2"
											]
										},
										"description": "Generated from cURL: curl -X 'GET' \\\r\n  'https://petstore.swagger.io/v2/store/order/1' \\\r\n  -H 'accept: application/json'"
									},
									"response": []
								},
								{
									"name": "TC23_PurchaseOrderByInvalidID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 404\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(404);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the required fields - code, type, and message\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData).to.have.property('code');\r",
													"    pm.expect(responseData).to.have.property('type');\r",
													"    pm.expect(responseData).to.have.property('message');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Content-Type is application/json\", function () {\r",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response time is less than 20000ms\", function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(20000);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}store/order/0",
											"host": [
												"{{base_url}}store"
											],
											"path": [
												"order",
												"0"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CreateOrder",
							"item": [
								{
									"name": "TC24_PlaceOrderPet",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the required fields\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.id).to.exist;\r",
													"    pm.expect(responseData.petId).to.exist;\r",
													"    pm.expect(responseData.quantity).to.exist;\r",
													"  \r",
													"    pm.expect(responseData.status).to.exist;\r",
													"    pm.expect(responseData.complete).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Complete is a boolean value\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.have.property('complete').that.is.a('boolean');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 100,\r\n  \"petId\": 10,\r\n  \"quantity\": 4,\r\n  \"status\": \"placed\",\r\n  \"complete\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}store/order",
											"host": [
												"{{base_url}}store"
											],
											"path": [
												"order"
											]
										},
										"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://petstore.swagger.io/v2/store/order' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"id\": 100,\r\n  \"petId\": 10,\r\n  \"quantity\": 4,\r\n  \"shipDate\": \"2024-09-08T08:17:54.712Z\",\r\n  \"status\": \"placed\",\r\n  \"complete\": true\r\n}'"
									},
									"response": []
								},
								{
									"name": "TC25_PlaceOrderByInvalidID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"  pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the required fields - code, type, and message\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData).to.have.property('code');\r",
													"    pm.expect(responseData).to.have.property('type');\r",
													"    pm.expect(responseData).to.have.property('message');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Content-Type is application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response time is within an acceptable range\", function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(5000);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": guyg,\r\n  \"petId\": 0,\r\n  \"quantity\": 0,\r\n  \"complete\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}store/order",
											"host": [
												"{{base_url}}store"
											],
											"path": [
												"order"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC26_PlaceOrderByEmptyID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"  pm.expect(pm.response.code).to.equal(400);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the required fields - code, type, and message\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData).to.have.property('code');\r",
													"    pm.expect(responseData).to.have.property('type');\r",
													"    pm.expect(responseData).to.have.property('message');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Content-Type is application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response time is within an acceptable range\", function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(5000);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": ,\r\n  \"petId\": 0,\r\n  \"quantity\": 0,\r\n  \"complete\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}store/order",
											"host": [
												"{{base_url}}store"
											],
											"path": [
												"order"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "DeleteOrder",
							"item": [
								{
									"name": "TC27_DeletePurchaseOrder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"pm.test(\"Response time is less than 20000ms\", function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(20000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the required fields - code, type, and message\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.code).to.exist;\r",
													"    pm.expect(responseData.type).to.exist;\r",
													"    pm.expect(responseData.message).to.exist;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Code is a non-negative integer\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData.code).to.exist.and.to.be.a('number');\r",
													"    pm.expect(responseData.code).to.be.at.least(0);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Type and message are non-empty strings\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Type should not be empty\");\r",
													"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
													"});\r",
													"pm.test(\"Response status code is either 404 or 200\", function () {\r",
													"  pm.expect(pm.response.code).to.satisfy((code) => {\r",
													"      return code === 404 || code === 200;\r",
													"  });\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}store/order/0",
											"host": [
												"{{base_url}}store"
											],
											"path": [
												"order",
												"0"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC28_DeletePurchaseOrderInvalidID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the required fields - code, type, and message\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.code).to.exist;\r",
													"    pm.expect(responseData.type).to.exist;\r",
													"    pm.expect(responseData.message).to.exist;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Code is a non-negative integer\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData.code).to.exist.and.to.be.a('number');\r",
													"    pm.expect(responseData.code).to.be.at.least(0);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Type and message are non-empty strings\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Type should not be empty\");\r",
													"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
													"});\r",
													"pm.test(\"Response status code is 200 or 404\", function () {\r",
													"    pm.expect([200, 404]).to.include(pm.response.code);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}store/order/1",
											"host": [
												"{{base_url}}store"
											],
											"path": [
												"order",
												"1"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "OrderChaining",
							"item": [
								{
									"name": "TC29_PlaceOrderPet",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Retrieve StoreID (order ID) from collection variable\r",
													"let storeID = pm.collectionVariables.get(\"StoreID\");\r",
													"\r",
													"// Check if the StoreID is set and valid\r",
													"pm.test(\"StoreID is generated and stored\", function () {\r",
													"    pm.expect(storeID).to.exist; // StoreID should exist\r",
													"    pm.expect(storeID).to.be.a(\"number\"); // StoreID should be a number\r",
													"    pm.expect(storeID).to.be.above(0); // StoreID should be greater than 0\r",
													"});\r",
													"\r",
													"// Optional: Log StoreID for debugging\r",
													"console.log(\"Stored StoreID: \" + storeID);\r",
													"\r",
													"// Test to ensure the response status is 200 or 201\r",
													"pm.test(\"Status code is 200 or 201\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Generate random IDs for order, pet, and quantity\r",
													"let generatedOrderId = Math.floor(Math.random() * 1000000); // Generate random order ID\r",
													"let generatedPetId = Math.floor(Math.random() * 10) + 1; // Random pet ID between 1 and 10\r",
													"let generatedQuantity = Math.floor(Math.random() * 10) + 1; // Random quantity between 1 and 10\r",
													"\r",
													"// Set the variables for use in the request body\r",
													"pm.variables.set(\"generatedOrderId\", generatedOrderId);\r",
													"pm.variables.set(\"generatedPetId\", generatedPetId);\r",
													"pm.variables.set(\"generatedQuantity\", generatedQuantity);\r",
													"\r",
													"// Store the generated Order ID as a collection variable (StoreID)\r",
													"pm.collectionVariables.set(\"StoreID\", generatedOrderId);\r",
													"\r",
													"// Log for debugging\r",
													"console.log(\"Generated Order ID: \" + generatedOrderId);\r",
													"console.log(\"Generated Pet ID: \" + generatedPetId);\r",
													"console.log(\"Generated Quantity: \" + generatedQuantity);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{generatedOrderId}},\r\n  \"petId\": {{generatedPetId}},\r\n  \"quantity\": {{generatedQuantity}},\r\n  \"status\": \"placed\",\r\n  \"complete\": true\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}store/order",
											"host": [
												"{{base_url}}store"
											],
											"path": [
												"order"
											]
										},
										"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://petstore.swagger.io/v2/store/order' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"id\": 100,\r\n  \"petId\": 10,\r\n  \"quantity\": 4,\r\n  \"shipDate\": \"2024-09-08T08:17:54.712Z\",\r\n  \"status\": \"placed\",\r\n  \"complete\": true\r\n}'"
									},
									"response": []
								},
								{
									"name": "TC30_PurchaseOrderByID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response content type is application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Validate the order object schema\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData).to.have.property('id');\r",
													"    pm.expect(responseData).to.have.property('petId');\r",
													"    pm.expect(responseData).to.have.property('quantity');\r",
													"    pm.expect(responseData).to.have.property('status');\r",
													"    pm.expect(responseData).to.have.property('complete');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{base_url}}store/order/{{StoreID}}",
											"host": [
												"{{base_url}}store"
											],
											"path": [
												"order",
												"{{StoreID}}"
											]
										},
										"description": "Generated from cURL: curl -X 'GET' \\\r\n  'https://petstore.swagger.io/v2/store/order/1' \\\r\n  -H 'accept: application/json'"
									},
									"response": []
								},
								{
									"name": "TC31_DeletePurchaseOrderByID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the required fields - code, type, and message\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"\r",
													"  pm.expect(responseData).to.be.an('object');\r",
													"  pm.expect(responseData.code).to.exist;\r",
													"  pm.expect(responseData.type).to.exist;\r",
													"  pm.expect(responseData.message).to.exist;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Code is a non-negative integer\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData.code).to.be.a('number').and.to.satisfy((code) => code >= 0);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Type and message are non-empty strings\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
													"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
													"});\r",
													"// Unset the StoreID collection variable\r",
													"pm.collectionVariables.unset(\"StoreID\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}store/order/{{StoreID}}",
											"host": [
												"{{base_url}}store"
											],
											"path": [
												"order",
												"{{StoreID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "User",
					"item": [
						{
							"name": "CreateNewUser",
							"item": [
								{
									"name": "TC35_CreateNewUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Parse the response\r",
													"let responseData = pm.response.json();\r",
													"\r",
													"// Check if the user was created successfully (status code 200 or 201)\r",
													"pm.test(\"Status code is 200 or 201\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
													"});\r",
													"\r",
													"// Ensure the username and id exist in the response\r",
													"//pm.test(\"Response contains user details\", function () {\r",
													"  //  pm.expect(responseData.username).to.eql(pm.collectionVariables.get(\"generatedUsername\"));\r",
													"  //  pm.expect(responseData.id).to.eql(pm.collectionVariables.get(\"generatedId\"));\r",
													"//});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Generate random ID for the user\r",
													"let generatedId = Math.floor(Math.random() * 100000);\r",
													"\r",
													"// Generate random username\r",
													"let randomNumber = Math.floor(Math.random() * 1000); // Random number to append\r",
													"let generatedUsername = \"User_\" + randomNumber;\r",
													"\r",
													"// Generate random first name from a list of names\r",
													"let firstNames = [\"John\", \"Jane\", \"Alice\", \"Bob\", \"Charlie\"];\r",
													"let generatedFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
													"\r",
													"// Generate random password\r",
													"let generatedPassword = \"Pass_\" + Math.random().toString(36).slice(-8);\r",
													"\r",
													"// Generate random email based on the username\r",
													"let generatedEmail = generatedUsername.toLowerCase() + \"@example.com\";\r",
													"\r",
													"// Set these values as collection variables for use in the request body\r",
													"pm.collectionVariables.set(\"generatedId\", generatedId);\r",
													"pm.collectionVariables.set(\"generatedUsername\", generatedUsername);\r",
													"pm.collectionVariables.set(\"generatedFirstName\", generatedFirstName);\r",
													"pm.collectionVariables.set(\"generatedPassword\", generatedPassword);\r",
													"pm.collectionVariables.set(\"generatedEmail\", generatedEmail);\r",
													"\r",
													"// Log for debugging\r",
													"console.log(\"Generated User Details: \", {\r",
													"    generatedId, generatedUsername, generatedFirstName, generatedPassword, generatedEmail\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{generatedId}},\r\n  \"username\": \"{{generatedUsername}}\",\r\n  \"firstName\": \"{{generatedFirstName}}\",\r\n  \"lastName\": \"Doe\",\r\n  \"email\": \"{{generatedEmail}}\",\r\n  \"password\": \"{{generatedPassword}}\",\r\n  \"phone\": \"1234567890\",\r\n  \"userStatus\": 0\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}user",
											"host": [
												"{{base_url}}user"
											]
										},
										"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://petstore.swagger.io/v2/user' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"id\": 100,\r\n  \"username\": \"Jyothi\",\r\n  \"firstName\": \"jyo\",\r\n  \"lastName\": \"jyo\",\r\n  \"email\": \"jyo@gmail.com\",\r\n  \"password\": \"Jyo@123\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}'"
									},
									"response": []
								},
								{
									"name": "TC36_CreateNewUserInvalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the required fields - code, type, and message\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.have.property('code');\r",
													"    pm.expect(responseData).to.have.property('type');\r",
													"    pm.expect(responseData).to.have.property('message');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Email is in a valid format\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response time is less than 4000ms\", function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(4000);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": ' ',\r\n  \"username\": {{InvalidUsername}},\r\n  \"email\": \"jyo@gmail.com\",\r\n  \"password\": {{InvalidPassword}}\r\n\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}user",
											"host": [
												"{{base_url}}user"
											]
										},
										"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://petstore.swagger.io/v2/user' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"id\": 100,\r\n  \"username\": \"Jyothi\",\r\n  \"firstName\": \"jyo\",\r\n  \"lastName\": \"jyo\",\r\n  \"email\": \"jyo@gmail.com\",\r\n  \"password\": \"Jyo@123\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}'"
									},
									"response": []
								}
							]
						},
						{
							"name": "LoginUser",
							"item": [
								{
									"name": "TC37_LoginUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Content-Type header is application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response schema contains code, type, and message fields\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData).to.be.an('object');\r",
													"  pm.expect(responseData).to.have.property('code');\r",
													"  pm.expect(responseData).to.have.property('type');\r",
													"  pm.expect(responseData).to.have.property('message');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{base_url}}user/login?username={{generatedUsername}}&password={{generatedPassword}}",
											"host": [
												"{{base_url}}user"
											],
											"path": [
												"login"
											],
											"query": [
												{
													"key": "username",
													"value": "{{generatedUsername}}"
												},
												{
													"key": "password",
													"value": "{{generatedPassword}}"
												}
											]
										},
										"description": "Generated from cURL: curl -X 'GET' \\\r\n  'https://petstore.swagger.io/v2/user/login?username=Jyothi&password=Jyo%40123' \\\r\n  -H 'accept: application/json'"
									},
									"response": []
								}
							]
						},
						{
							"name": "LogOutUser",
							"item": [
								{
									"name": "TC38_LogOutUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response time is within an acceptable range\", function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the required fields - code, type, and message\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.code).to.exist;\r",
													"    pm.expect(responseData.type).to.exist;\r",
													"    pm.expect(responseData.message).to.exist;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Code is a non-negative integer\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData).to.be.an('object');\r",
													"  pm.expect(responseData.code).to.be.a('number').and.to.satisfy((code) => code >= 0, \"Code should be a non-negative integer\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Type and message are non-empty strings\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData).to.be.an('object');\r",
													"  pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Type should be a non-empty string\");\r",
													"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should be a non-empty string\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{base_url}}user/logout?username={{InvalidUsername}}&password={{InvalidPassword}}",
											"host": [
												"{{base_url}}user"
											],
											"path": [
												"logout"
											],
											"query": [
												{
													"key": "username",
													"value": "{{InvalidUsername}}"
												},
												{
													"key": "password",
													"value": "{{InvalidPassword}}"
												}
											]
										},
										"description": "Generated from cURL: curl -X 'GET' \\\r\n  'https://petstore.swagger.io/v2/user/logout' \\\r\n  -H 'accept: application/json'"
									},
									"response": []
								}
							]
						},
						{
							"name": "GET_ByUsername",
							"item": [
								{
									"name": "TC39_GET_Username",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{base_url}}user/{{generatedUsername}}",
											"host": [
												"{{base_url}}user"
											],
											"path": [
												"{{generatedUsername}}"
											]
										},
										"description": "Generated from cURL: curl -X 'GET' \\\r\n  'https://petstore.swagger.io/v2/user/Jyothi' \\\r\n  -H 'accept: application/json'"
									},
									"response": []
								},
								{
									"name": "TC40_GET_InvalidUsername",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{base_url}}user/fgfh",
											"host": [
												"{{base_url}}user"
											],
											"path": [
												"fgfh"
											]
										},
										"description": "Generated from cURL: curl -X 'GET' \\\r\n  'https://petstore.swagger.io/v2/user/Jyothi' \\\r\n  -H 'accept: application/json'"
									},
									"response": []
								}
							]
						},
						{
							"name": "UpdateUser",
							"item": [
								{
									"name": "TC41_UpdateUser",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Ensure the variables are already set from the previous request\r",
													"let generatedId = pm.collectionVariables.get(\"generatedId\");\r",
													"let generatedUsername = pm.collectionVariables.get(\"generatedUsername\");\r",
													"let generatedFirstName = pm.collectionVariables.get(\"generatedFirstName\");\r",
													"let generatedEmail = pm.collectionVariables.get(\"generatedEmail\");\r",
													"let generatedPassword = pm.collectionVariables.get(\"generatedPassword\");\r",
													"\r",
													"// Ensure that all required variables exist before proceeding with the PUT request\r",
													"if (!generatedId || !generatedUsername || !generatedFirstName || !generatedEmail || !generatedPassword) {\r",
													"    console.error(\"Required variables are missing!\");\r",
													"} else {\r",
													"    console.log(\"Updating user with Username: \" + generatedUsername);\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Parse the response data\r",
													"let responseData = pm.response.json();\r",
													"\r",
													"// Check if the status code indicates success (200 OK)\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// Check if the updated user data matches the variables we used\r",
													"pm.test(\"Updated user matches the input data\", function () {\r",
													"    pm.expect(responseData.username).to.not.eql(pm.collectionVariables.get(\"generatedUsername\"));\r",
													"    pm.expect(responseData.firstName).to.not.eql(pm.collectionVariables.get(\"generatedFirstName\"));\r",
													"    pm.expect(responseData.email).to.not.eql(pm.collectionVariables.get(\"generatedEmail\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{generatedId}},\r\n  \"username\": \"{{generatedUsername}}\",\r\n  \"firstName\": \"{{generatedFirstName}}\",\r\n  \"lastName\": \"UpdatedDoe\",\r\n  \"email\": \"{{generatedEmail}}\",\r\n  \"password\": \"{{generatedPassword}}\",\r\n  \"phone\": \"9876543210\",\r\n  \"userStatus\": 1\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}user/{{generatedUsername}}",
											"host": [
												"{{base_url}}user"
											],
											"path": [
												"{{generatedUsername}}"
											]
										},
										"description": "Generated from cURL: curl -X 'PUT' \\\r\n  'https://petstore.swagger.io/v2/user/Jyothi' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"id\": 100,\r\n  \"username\": \"Jyothi\",\r\n  \"firstName\": \"jyo1\",\r\n  \"lastName\": \"jyo\",\r\n  \"email\": \"jyo@gmail.com\",\r\n  \"password\": \"Jyo@4123\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 10\r\n}'"
									},
									"response": []
								}
							]
						},
						{
							"name": "DeleteUser",
							"item": [
								{
									"name": "TC42_DeleteUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check if the user was deleted successfully (status code 200 or 204)\r",
													"pm.test(\"Status code is 200 or 204\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
													"});\r",
													"\r",
													"// Unset the variables used for the deleted user\r",
													"pm.collectionVariables.unset(\"generatedUsername\");\r",
													"pm.collectionVariables.unset(\"generatedId\");\r",
													"pm.collectionVariables.unset(\"generatedFirstName\");\r",
													"pm.collectionVariables.unset(\"generatedPassword\");\r",
													"pm.collectionVariables.unset(\"generatedEmail\");\r",
													"\r",
													"// Log confirmation that variables are unset\r",
													"console.log(\"User deleted and variables have been unset.\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Ensure the username is set\r",
													"let generatedUsername = pm.collectionVariables.get(\"generatedUsername\");\r",
													"if (!generatedUsername) {\r",
													"    console.error(\"No generated username found!\");\r",
													"    pm.environment.set(\"generatedUsername\", null); // In case of error handling\r",
													"} else {\r",
													"    console.log(\"Deleting user with username: \" + generatedUsername);\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{base_url}}user/{{generatedUsername}}",
											"host": [
												"{{base_url}}user"
											],
											"path": [
												"{{generatedUsername}}"
											]
										},
										"description": "Generated from cURL: curl -X 'DELETE' \\\r\n  'https://petstore.swagger.io/v2/user/Jyothi' \\\r\n  -H 'accept: application/json'"
									},
									"response": []
								}
							]
						},
						{
							"name": "User_Chaining",
							"item": [
								{
									"name": "TC43_CreateNewUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Parse the response\r",
													"let responseData = pm.response.json();\r",
													"\r",
													"// Check if the user was created successfully (status code 200 or 201)\r",
													"pm.test(\"Status code is 200 or 201\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Generate random ID for the user\r",
													"let generatedId = Math.floor(Math.random() * 100000);\r",
													"\r",
													"// Generate random username\r",
													"let randomNumber = Math.floor(Math.random() * 1000); // Random number to append\r",
													"let generatedUsername = \"User_\" + randomNumber;\r",
													"\r",
													"// Generate random first name from a list of names\r",
													"let firstNames = [\"John\", \"Jane\", \"Alice\", \"Bob\", \"Charlie\"];\r",
													"let generatedFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
													"\r",
													"// Generate random password\r",
													"let generatedPassword = \"Pass_\" + Math.random().toString(36).slice(-8);\r",
													"\r",
													"// Generate random email based on the username\r",
													"let generatedEmail = generatedUsername.toLowerCase() + \"@example.com\";\r",
													"\r",
													"// Set these values as collection variables for use in the request body\r",
													"pm.collectionVariables.set(\"generatedId\", generatedId);\r",
													"pm.collectionVariables.set(\"generatedUsername\", generatedUsername);\r",
													"pm.collectionVariables.set(\"generatedFirstName\", generatedFirstName);\r",
													"pm.collectionVariables.set(\"generatedPassword\", generatedPassword);\r",
													"pm.collectionVariables.set(\"generatedEmail\", generatedEmail);\r",
													"\r",
													"// Log for debugging\r",
													"console.log(\"Generated User Details: \", {\r",
													"    generatedId, generatedUsername, generatedFirstName, generatedPassword, generatedEmail\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{generatedId}},\r\n  \"username\": \"{{generatedUsername}}\",\r\n  \"firstName\": \"{{generatedFirstName}}\",\r\n  \"lastName\": \"Doe\",\r\n  \"email\": \"{{generatedEmail}}\",\r\n  \"password\": \"{{generatedPassword}}\",\r\n  \"phone\": \"1234567890\",\r\n  \"userStatus\": 0\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}user",
											"host": [
												"{{base_url}}user"
											]
										},
										"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://petstore.swagger.io/v2/user' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"id\": 100,\r\n  \"username\": \"Jyothi\",\r\n  \"firstName\": \"jyo\",\r\n  \"lastName\": \"jyo\",\r\n  \"email\": \"jyo@gmail.com\",\r\n  \"password\": \"Jyo@123\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}'"
									},
									"response": []
								},
								{
									"name": "TC44_GET_Username",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{base_url}}user/{{generatedUsername}}",
											"host": [
												"{{base_url}}user"
											],
											"path": [
												"{{generatedUsername}}"
											]
										},
										"description": "Generated from cURL: curl -X 'GET' \\\r\n  'https://petstore.swagger.io/v2/user/Jyothi' \\\r\n  -H 'accept: application/json'"
									},
									"response": []
								},
								{
									"name": "TC45_DeleteUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check if the user was deleted successfully (status code 200 or 204)\r",
													"pm.test(\"Status code is 200 or 204\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
													"});\r",
													"\r",
													"// Unset the variables used for the deleted user\r",
													"pm.collectionVariables.unset(\"generatedUsername\");\r",
													"pm.collectionVariables.unset(\"generatedId\");\r",
													"pm.collectionVariables.unset(\"generatedFirstName\");\r",
													"pm.collectionVariables.unset(\"generatedPassword\");\r",
													"pm.collectionVariables.unset(\"generatedEmail\");\r",
													"\r",
													"// Log confirmation that variables are unset\r",
													"console.log(\"User deleted and variables have been unset.\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Ensure the username is set\r",
													"let generatedUsername = pm.collectionVariables.get(\"generatedUsername\");\r",
													"if (!generatedUsername) {\r",
													"    console.error(\"No generated username found!\");\r",
													"    pm.environment.set(\"generatedUsername\", null); // In case of error handling\r",
													"} else {\r",
													"    console.log(\"Deleting user with username: \" + generatedUsername);\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{base_url}}user/{{generatedUsername}}",
											"host": [
												"{{base_url}}user"
											],
											"path": [
												"{{generatedUsername}}"
											]
										},
										"description": "Generated from cURL: curl -X 'DELETE' \\\r\n  'https://petstore.swagger.io/v2/user/Jyothi' \\\r\n  -H 'accept: application/json'"
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "DataDriven",
			"item": [
				{
					"name": "Pet_DataDriven",
					"item": [
						{
							"name": "TC18_CreatePet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the response body as a JSON object\r",
											"let responseData = pm.response.json();\r",
											"\r",
											"// Capture the 'id' from the response after the order is created\r",
											"pm.collectionVariables.set(\"PETID\", responseData.id);\r",
											"\r",
											"// Log for debugging\r",
											"console.log(\"PETID created: \" + responseData.id);\r",
											"\r",
											"// Test if the PETID is captured\r",
											"pm.test(\"PETID is captured successfully\", function () {\r",
											"    pm.expect(responseData.id).to.exist;\r",
											"});\r",
											"\r",
											"// Test to ensure the status code is 200 or 201\r",
											"pm.test(\"Status code is 200 or 201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{id}}\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://petstore.swagger.io/v2/pet",
									"protocol": "https",
									"host": [
										"petstore",
										"swagger",
										"io"
									],
									"path": [
										"v2",
										"pet"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC19_pet_petId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test to ensure the status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://petstore.swagger.io/v2/pet/{{PETID}}",
									"protocol": "https",
									"host": [
										"petstore",
										"swagger",
										"io"
									],
									"path": [
										"v2",
										"pet",
										"{{PETID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC20_DeletePetByPetId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test to ensure the status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"// Unset the PETID variable\r",
											"pm.collectionVariables.unset(\"PETID\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://petstore.swagger.io/v2/pet/{{PETID}}",
									"protocol": "https",
									"host": [
										"petstore",
										"swagger",
										"io"
									],
									"path": [
										"v2",
										"pet",
										"{{PETID}}"
									]
								},
								"description": "Generated from cURL: curl -X 'DELETE' \\\r\n  'https://petstore.swagger.io/v2/pet/9223372016900019095' \\\r\n  -H 'accept: application/json'"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "OrderDataDriven",
					"item": [
						{
							"name": "TC32_PlaceOrderPet Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the response body as a JSON object\r",
											"let responseData = pm.response.json();\r",
											"\r",
											"// Capture the 'id' from the response after the order is created\r",
											"pm.collectionVariables.set(\"StoreID\", responseData.id);\r",
											"\r",
											"// Log for debugging\r",
											"console.log(\"StoreID created: \" + responseData.id);\r",
											"\r",
											"// Test if the StoreID is captured\r",
											"pm.test(\"StoreID is captured successfully\", function () {\r",
											"    pm.expect(responseData.id).to.exist;\r",
											"});\r",
											"\r",
											"// Test to ensure the status code is 200 or 201\r",
											"pm.test(\"Status code is 200 or 201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{id}},\r\n  \"petId\": {{petId}},\r\n  \"quantity\": {{quantity}},\r\n  \"complete\": {{complete}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}store/order",
									"host": [
										"{{base_url}}store"
									],
									"path": [
										"order"
									]
								},
								"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://petstore.swagger.io/v2/store/order' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"id\": 100,\r\n  \"petId\": 10,\r\n  \"quantity\": 4,\r\n  \"shipDate\": \"2024-09-08T08:17:54.712Z\",\r\n  \"status\": \"placed\",\r\n  \"complete\": true\r\n}'"
							},
							"response": []
						},
						{
							"name": "TC33_PurchaseOrderByID Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response content type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{base_url}}store/order/{{StoreID}}",
									"host": [
										"{{base_url}}store"
									],
									"path": [
										"order",
										"{{StoreID}}"
									]
								},
								"description": "Generated from cURL: curl -X 'GET' \\\r\n  'https://petstore.swagger.io/v2/store/order/1' \\\r\n  -H 'accept: application/json'"
							},
							"response": []
						},
						{
							"name": "TC34_DeletePurchaseOrderByID Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields - code, type, and message\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.code).to.exist;\r",
											"  pm.expect(responseData.type).to.exist;\r",
											"  pm.expect(responseData.message).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Code is a non-negative integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.code).to.be.a('number').and.to.satisfy((code) => code >= 0);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Type and message are non-empty strings\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
											"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
											"});\r",
											"// Unset the StoreID collection variable\r",
											"pm.collectionVariables.unset(\"StoreID\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}store/order/{{StoreID}}",
									"host": [
										"{{base_url}}store"
									],
									"path": [
										"order",
										"{{StoreID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"const currentType = pm.iterationData.get('type');\r",
									"\r",
									"if (currentType === \"Store\") {\r",
									"    const storeData = pm.iterationData.get('data');\r",
									"    pm.variables.set(\"storeId\", storeData.id);\r",
									"    pm.variables.set(\"petId\", storeData.petId);\r",
									"    pm.variables.set(\"quantity\", storeData.quantity);\r",
									"    pm.variables.set(\"complete\", storeData.complete);\r",
									"} else {\r",
									"    postman.setNextRequest(null); // Skip if not \"Store\"\r",
									"}\r",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "UserDataDriven",
					"item": [
						{
							"name": "TC46_CreateNewUser Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let responseData = pm.response.json();\r",
											"\r",
											"// Validate that the user has been created successfully\r",
											"pm.test(\"Status code is 200 or 201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let userData = pm.request.body.raw; // Get the body of the request\r",
											"userData = JSON.parse(userData); // Parse the raw JSON body\r",
											"\r",
											"pm.collectionVariables.set(\"userId\", userData.id); // Set userId as a collection variable\r",
											"pm.collectionVariables.set(\"username\", userData.username); // Set username as a collection variable\r",
											"\r",
											"console.log(\"userId set to:\", userData.id);\r",
											"console.log(\"username set to:\", userData.username);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{id}}\",\r\n  \"username\": \"{{username}}\",\r\n  \"firstName\": \"{{firstName}}\",\r\n  \"lastName\": \"{{lastName}}\",\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"phone\": \"{{phone}}\",\r\n  \"userStatus\": \"{{userStatus}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}user",
									"host": [
										"{{base_url}}user"
									]
								},
								"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://petstore.swagger.io/v2/user' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"id\": 100,\r\n  \"username\": \"Jyothi\",\r\n  \"firstName\": \"jyo\",\r\n  \"lastName\": \"jyo\",\r\n  \"email\": \"jyo@gmail.com\",\r\n  \"password\": \"Jyo@123\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}'"
							},
							"response": []
						},
						{
							"name": "TC47_GET_Username Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {\r",
											"    console.log(\"User retrieved successfully:\", pm.response.json());\r",
											"} else {\r",
											"    console.log(\"Failed to retrieve user:\", pm.response.status);\r",
											"}\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let username = pm.collectionVariables.get(\"username\"); // Get the username from the collection variables\r",
											"\r",
											"// Log the username to make sure it’s correctly set\r",
											"console.log(\"Fetching user with username:\", username);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{base_url}}user/{{username}}",
									"host": [
										"{{base_url}}user"
									],
									"path": [
										"{{username}}"
									]
								},
								"description": "Generated from cURL: curl -X 'GET' \\\r\n  'https://petstore.swagger.io/v2/user/Jyothi' \\\r\n  -H 'accept: application/json'"
							},
							"response": []
						},
						{
							"name": "TC48_DeleteUser Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.collectionVariables.unset(\"userId\");\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.collectionVariables.unset(\"username\");\r",
											"\r",
											"console.log(\"Collection variables userId and username have been unset\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{base_url}}user/{{username}}",
									"host": [
										"{{base_url}}user"
									],
									"path": [
										"{{username}}"
									]
								},
								"description": "Generated from cURL: curl -X 'DELETE' \\\r\n  'https://petstore.swagger.io/v2/user/Jyothi' \\\r\n  -H 'accept: application/json'"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"const currentType = pm.iterationData.get('type');\r",
									"\r",
									"if (currentType === \"User\") {\r",
									"    const userData = pm.iterationData.get('data');\r",
									"    pm.variables.set(\"userId\", userData.id);\r",
									"    pm.variables.set(\"username\", userData.username);\r",
									"    pm.variables.set(\"firstName\", userData.firstName);\r",
									"    pm.variables.set(\"lastName\", userData.lastName);\r",
									"    pm.variables.set(\"email\", userData.email);\r",
									"    pm.variables.set(\"password\", userData.password);\r",
									"    pm.variables.set(\"phone\", userData.phone);\r",
									"    pm.variables.set(\"userStatus\", userData.userStatus);\r",
									"} else {\r",
									"    postman.setNextRequest(null); // Skip if not \"User\"\r",
									"}\r",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://petstore.swagger.io/v2/",
			"type": "string"
		},
		{
			"key": "petId",
			"value": "9223372036854747521",
			"type": "string"
		}
	]
}